from filters import IsAdmin, IsUser
import os
import handlers
from aiogram import executor, types
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove
from data import config
from loader import dp, db, bot
import filters
import logging
from utils.notify_admins import on_startup_notify
from utils.set_bot_commands import set_default_commands

filters.setup(dp)

WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.environ.get("PORT", 5000))
user_message = 'üôé‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
admin_message = 'üë®‚Äçüîß –ê–¥–º–∏–Ω'

catalog = 'üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥'
balance = 'üí∞ –ë–∞–ª–∞–Ω—Å'
cart = 'üõí –ö–æ—Ä–∑–∏–Ω–∞'
delivery_status = 'üöö –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞'

settings = '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞'
orders = 'üöö –ó–∞–∫–∞–∑—ã'
questions = '‚ùì –í–æ–ø—Ä–æ—Å—ã'


@dp.message_handler(commands='start', user_id = config.ADMINS)
async def cmd_start(message: types.Message):

    markup = ReplyKeyboardMarkup(resize_keyboard=True)

    markup.row(admin_message, user_message)

    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}! ü§ñ –Ø –≤–∞—à –±–æ—Ç\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–µ–Ω—è –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=markup)


@dp.message_handler(IsUser(), commands='start')
async def user_menu(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add(catalog)
    markup.add(balance, cart)
    markup.add(delivery_status)

    await message.answer('''–ü—Ä–∏–≤–µ—Ç! üëã

ü§ñ –Ø –±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω –ø–æ –ø–æ–¥–∞–∂–µ —Ç–æ–≤–∞—Ä–æ–≤ –ª—é–±–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    
üõçÔ∏è –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∏–≥–ª—è–Ω—É–≤—à–∏–µ—Å—è —Ç–æ–≤–∞—Ä—ã –≤–æ–∑–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /menu.

‚ùì –í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã? –ù–µ –ø—Ä–æ–±–ª–µ–º–∞! –ö–æ–º–∞–Ω–¥–∞ /sos –ø–æ–º–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç–∞—Ä–∞—é—Ç—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è.

ü§ù –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ—Ö–æ–∂–µ–≥–æ –±–æ—Ç–∞? –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º <a href="https://t.me/Bekzod_Rakhimov">Bekzod Raximov</a>, –æ–Ω –Ω–µ –∫—É—Å–∞–µ—Ç—Å—è)))
    ''', reply_markup=markup, disable_web_page_preview=True)


@dp.message_handler(IsAdmin(), text=user_message)
async def user_mode(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add(catalog)
    markup.add(balance, cart)
    markup.add(delivery_status)
    
    cid = message.chat.id
    if cid in config.ADMINS:
        config.ADMINS.remove(cid)

    # await message.answer('–í–∫–ª—é—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º.', reply_markup=ReplyKeyboardRemove())

    await message.answer('–í–∫–ª—é—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º.', reply_markup=markup)

@dp.message_handler(text=admin_message, user_id = config.ADMINS)
async def admin_mode(message: types.Message):

    markup = ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add(settings)
    markup.add(questions, orders)
    markup.add(user_message)

    cid = message.chat.id
    if cid not in config.ADMINS:
        config.ADMINS.append(cid)

    # await message.answer('–í–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º.', reply_markup=ReplyKeyboardRemove())

    await message.answer('–í–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º.', reply_markup=markup)


async def on_startup(dp):
    # Birlamchi komandalar (/start va /help)
    await set_default_commands(dp)

    logging.basicConfig(level=logging.INFO)
    db.create_tables()

    # Bot ishga tushgani haqida adminga xabar berish
    await on_startup_notify(dp)

    await bot.delete_webhook()
    await bot.set_webhook(config.WEBHOOK_URL)


async def on_shutdown():
    logging.warning("Shutting down..")
    await bot.delete_webhook()
    await dp.storage.close()
    await dp.storage.wait_closed()
    logging.warning("Bot down")


if __name__ == '__main__':

    if "HEROKU" in list(os.environ.keys()):

        executor.start_webhook(
            dispatcher=dp,
            webhook_path=config.WEBHOOK_PATH,
            on_startup=on_startup,
            on_shutdown=on_shutdown,
            skip_updates=True,
            host=WEBAPP_HOST,
            port=WEBAPP_PORT,
        )

    else:

        executor.start_polling(dp, on_startup=on_startup, skip_updates=False)
